安装jsoncpp:
  1. 源码安装
  2. 包管理工具安装， rpm install jsoncpp
  
 使用第二种安装。
 使用：
  - collect.sh
  #!/usr/bin/env bash
  rm -fr ./bin ./sbin ./var ./include ./lib ./lib64  ./libexec ./share
  rpm -ql \
    jsoncpp-0.6.0 jsoncpp-devel-0.6.0 \
        |tar -T /dev/stdin -cf /dev/stdout|tar -xf /dev/stdin
  mv usr/* ./ && rmdir usr
  ln -sf libjsoncpp.so.0.0.0 lib64/libjsoncpp.so.0
  ln -sf libjsoncpp.so.0.0.0 lib64/libjsoncpp.so
  -BUILD
      cc_library(
        name = "jsoncpp",
        hdrs = glob(["include/jsoncpp/json/*.h"]),
        srcs = glob(["lib*/lib*.so*"]),
        includes = ["include", "include/jsoncpp"],
        visibility = ["//visibility:public"],
    )
    
    
   主要三种类：
       Value, Reader, Writer . jsonCpp总所有对象、类名都在namespace json中，使用时只要包含json.h即可。
       Json::Value root;
      root["status"] = 1;			//新建一个key为status，赋予数值1
      root["message"] = "OK";		//新建一个key为message，赋予字符串OK
      root["array"].append("arr"); //新建一个key为array，类型为数组，对第一个元素赋值为字符串“arr”
      root["array"].append(1234);  // 为数组 key_array 赋值，对第二个元素赋值为：1234。
      Json::ValueType type = root.type();	//获得root的类型


  Json::ValueType：value的类型，是一个枚举型
      enum ValueType {
  nullValue = 0, ///< 'null' value
  intValue,      ///< signed integer value
  uintValue,     ///< unsigned integer value
  realValue,     ///< double value
  stringValue,   ///< UTF-8 string value
  booleanValue,  ///< bool value
  arrayValue,    ///< array value (ordered list)
  objectValue    ///< object value (collection of name/value pairs).
};
Json::Writer :
    主要讲内存中Value对象转换为Json文档，输出到文件或者字符串中。
     Json::Writer 是一个纯虚类，不能直接使用，一般使用Json::Writer的子类  ：
        Json::FasterWriter, Json::StyledWriter  Json::StyledStreamWriter
       
     在新版中Json::FasterWriter, Json::StyledWriter、Json::Reader都被弃用，替代的是Json::StreamWriterBuilder、Json::CharReaderBuilder
          Json::FasterWriter：速度最快, Json::StyledWriter：格式化后的json
          
Json::Reader:
    用于读取，主要将字符串或者文件输入流转换为Json::Value对象。
    parse();
     使用Json::Reader 对json文件进行解析。
     bool parse(const std::string& document, Value& root, bool collectComments = true);
      参数：document: 包含要读取的文档的UTF-8编码字符串
     root:（输出）Json::Value的对象
      
    使用Json::Reader对json输入流（文件）进行解析
      bool parse(std:stream& is, Value& root, bool collectComment = true); 
      
    c、使用Json::Reader对字符串进行解析
      bool parse(const char* beginDoc, const char* ednDoc, Value& root, bool collectComment = true);

JsonCpp其他操作
    判断key是否存在
    bool Json::Value::isMember ( const char * key) const；
        存在返回1，否则返回0
  判断是否为null成员函数
注：Json::Value和C++中的map有一个共同的特点，就是当你尝试访问一个不存在的 key 时，会自动生成这样一个key-value默认为null的值对。
c、得到所有成员
typedef std::vectorstd::string Json::Value::Members;
Value::Members Json::Value::getMemberNames ( ) const;
该函数的类型为一个string的vector。

d、删除成员
Value Json::Value::removeMember( const char* key)
返回删除的值，或者null






#include <iostream>
#include <fstream>
#include <string>
#include "json/json.h"

using namespace std;

int main()
{
	const char* age;
	Json::Value root;
	Json::FastWriter fast_writer;
	Json::StyledWriter style_writer;
	Json::StyledStreamWriter stream_writer;
	Json::Reader reader;
	Json::Value json_object;

	root["null"] = NULL;			//注意此处在输出是显示为0，而非null
	root["message"] = "OK";
	root["age"] = 52;
	root["array"].append("arr");	// 新建一个key为array，类型为数组，对第一个元素赋值为字符串“arr”
	root["array"].append(123);		// 为数组 key_array 赋值，对第二个元素赋值为：1234

	Json::ValueType type = root.type();				//root的类型

	cout << root.toStyledString() << endl;			//格式化输出
	cout << "root_type：" <<type << endl;			//类型为7，即为类型为对象

	// 写到本地文件
	cout << "快速输出：" << endl;
	string str = fast_writer.write(root);
	cout << str << endl;		//快速输出,紧凑型
	ofstream ofs("fast_writer.json");
	ofs << str;
	ofs.close();

	cout << "格式化输出：" << endl;
	str = style_writer.write(root);
	cout << str << endl;		//格式化输出，排版型
	ofs.open("style_writer.json");
	ofs << str;
	ofs.close();


	// 对字符串解析
	//const char* json_document = "{\"age\" : 12, \"name\" : \"weng\"}";
	string json_document = "{\"age\" : 123, \"name\" : \"weng\"}";
	if (!reader.parse(json_document, json_object)){
		cout << "error" << endl;
		return 0;
	}
	else{
		cout <<"age:" <<json_object["age"] << " name" << json_object["name"] << endl;
	}
	
	// 对文件解析
	ifstream ifs("E:\\demo\\JsonTest\\JsonTest\\example.json", ios::binary);
	if (!reader.parse(ifs, json_object)){
		cout << "open error" << endl;
		ifs.close();
	}else{
		cout << "encoding:" << json_object["encoding"].asString() << endl;
		cout << "age:" <<json_object["age"].asInt() << endl;
		int num = json_object["plug"].size();
		for (int i = 0; i < num; i++){
			cout << json_object["plug"][i].asString() << " ";
		}
		ifs.close();
		cout << endl;
	}

	// 判断key是否存在
	bool is_age =  root.isMember("age");
	cout << "isMember:" <<is_age << endl;

	// 判断是否为null
	//bool is_null = root["null"].isNull();			//注意此处被赋值为0，而非null
	bool is_null = json_object["null"].isNull();
	cout << "is_null:" << is_null << endl;

	// 得到所有的key
	for (auto elem : root.getMemberNames()){
		cout << elem << " ";
	}
	cout << endl;

	// 删除成员
	cout << "remove_age:" << root.removeMember("age") << endl;


	system("pause");
	return 0;
}



    
